{"name":"Nustack","tagline":"Nustack is a stack-oriented concatenative programming language with support for high-level modular programming and Python integration.","body":"[![Join the chat at https://gitter.im/BookOwl/nustack](https://badges.gitter.im/BookOwl/nustack.svg)](https://gitter.im/BookOwl/nustack?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n# Nustack\r\nNustack is a stack-oriented concatenative programming language with support for high-level modular programming and Python integration.\r\nFor an excellent introduction to concatenative programming, please see http://evincarofautumn.blogspot.com/2012/02/why-concatenative-programming-matters.html?m=1\r\n\r\n## Installing.\r\nTo install, clone this repository and put the contents in a folder called nustack that is on your module search path.\r\n\r\nNustak is compatible with Python 3.\r\n## Running\r\nTo run a Nustack program, just run the following command line: `python -m nustack path/to/program.nu`\r\n\r\n`python -m nustack` starts the Nustack interactive prompt.\r\n\r\n## Help\r\nCurrently, there is little documentation for Nustack, but I am working on it. For now, create an issue with your questions, ask on gitter, or post them in the [Nustack Scratch forum topic](https://scratch.mit.edu/discuss/topic/184118/)\r\n## Examples\r\nHere is an example Nustack program:\r\n\r\n```\r\n/* examples/testprog.nu */\r\n`std::IO importext\r\n`std::Time importext\r\n`std::Control importext /* Import the IO, Time and Control modules */\r\n'file.txt' \"r\" IO::open IO::readall IO::close /*Open, read, and close the file 'file.txt' */\r\nshow /*Show the contents of the file*/\r\n{ \"spam\" show /*Print spam*/\r\n  1 Time::sleep /*Pause for 1 second*/\r\n} `spam define\r\n{ spam } Control::forever\r\n```\r\n\r\nHere is a more complex example that draws a tree using the Turtle module:\r\n\r\n```\r\n/* turtle_tree.nu - A recursive tree drawn with turtle graphics. */\r\n/* Import the Seq and Turtle modules */\r\n`Seq import `Turtle import*\r\n\r\n/* Set up the turtle and the states list */\r\nTurtle `t define\r\n[] `states define\r\n\r\n/* Save the turtle's current state */\r\n{`tcopy def [tcopy get.pos rot get.dir swap drop] states swap Seq::append tcopy} `save.state define\r\n\r\n/* Set the turtle's state to the last one saved */\r\n{`tcopy def states Seq::pop `newstate def\r\n  tcopy pu\r\n  tcopy newstate 0 Seq::nth newstate 1 Seq::nth set.pos\r\n  tcopy newstate 2 Seq::nth  set.dir\r\n  tcopy pd\r\n  } `pop.state define\r\n\r\n/* Here is the tree function */\r\n{`angle def `d def `n def `t def /* Save our arguments */\r\n  n 0 eq /* Test if we have hit the base case */\r\n  {t \"#0fd268\" /*green*/ pencolor 10 dot \"#4f3c0c\" pencolor} /* If so, draw a leaf */\r\n  { /* Else, recursivly draw the rest of the tree */\r\n    t save.state\r\n    t n pensize\r\n    d fd\r\n    angle rt n 1 - d 0.7 * angle tree\r\n    t angle 2 * lt n 1 - d 0.7 * angle tree\r\n    t pop.state\r\n  }\r\n  if\r\n} `tree def\r\n\r\n/* Configure the screen */\r\nScreen [\"Nustack Turtle Graphics - Recursive Tree\" 600 500] config.screen\r\n/* Write some text */\r\nt pu -280 200 set.pos \"Recursive Tree\" 20 write\r\n\r\n/* Get the turtle ready to draw */\r\nt pu 0 -250 set.pos 90 set.dir pd\r\nt \"#4f3c0c\" /*brown*/ pencolor\r\nhide.turtle 0 speed /* 0 speed means no animation */\r\n\r\n/* Draw the tree. */\r\n\"Turtle\" \"How many iterations?\" number.input `iters def\r\n\"Turtle\" \"What is the length of the first segment?\" number.input `len def\r\n\"Turtle\" \"What is the branching angle?\" number.input `angle def\r\nt iters len angle tree\r\n/* Start the turtle mainloop so that our drawing stays on the screen. */\r\ndone\r\n```\r\nHere is a screenshot:\r\n\r\n![Screenshot](https://github.com/BookOwl/nustack/raw/master/screenshots/screenshot1.png)\r\n\r\nBoth example programs can be found in the examples directory.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}